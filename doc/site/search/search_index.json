{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CryptoFuzz","text":""},{"location":"#installing-quick-use","title":"Installing &amp; Quick Use","text":""},{"location":"#windows","title":"Windows","text":"<p>On Windows, you can install CryptoFuzz using the following pip command:</p> <pre><code>pip install cryptofuzz\n</code></pre>"},{"location":"#linux-mac","title":"Linux &amp; Mac","text":"<p>On Linux and macOS, you should use pip3 for installation:</p> <pre><code>pip3 install cryptofuzz\n</code></pre>"},{"location":"#git","title":"Git","text":"<p>To use the latest version from the source, you can clone the CryptoFuzz repository:</p> <ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/Pymmdrza/cryptofuzz\n</code></pre> <ol> <li>Navigate to the cloned directory:</li> </ol> <pre><code>cd cryptofuzz\n</code></pre> <ol> <li>Install the package:</li> </ol>"},{"location":"#windows_1","title":"Windows","text":"<p>You can either run the <code>install.bat</code> or <code>install</code> command:</p> <pre><code>./install.bat\n# or\n./install\n</code></pre>"},{"location":"#linux-mac_1","title":"Linux &amp; Mac","text":"<p>On Linux and Mac, you can use the following commands to install:</p> <pre><code>bash install.sh\n# or simply:\n./install.sh\n</code></pre> <p>Note: If you face any permission issues on Linux, make the script executable using:</p> <pre><code>sudo chmod +x install.sh\n</code></pre>"},{"location":"#cli","title":"CLI","text":"<p>generated and converted private key (hex) , bytes (seed), wif compressed and uncompressed and mnemonic , Root Key (xprv) , XPUB, Decimal (Number) , Public Key and Binary To Compressed and Uncompressed Bitcoin Address :</p> <ul> <li>Generated Option : <code>--generate</code> and <code>-g</code></li> <li>Total Generated and convereted Key Option: <code>--total</code>, <code>-t</code> (integer/number type)</li> <li>Saved all Details and full information to <code>JSON file (OutputFile.json)</code> option <code>--save</code> and <code>-s</code> this example just generated <code>1000</code> key without save details</li> </ul> <pre><code># windows\npython cryptofuzz --generate --total 1000\n# linux &amp; mac\npython3 cryptofuzz --generate --total 1000\n</code></pre> <p>example Generated <code>1000</code> Key and saved to <code>OutputFile.json</code>:</p> <pre><code># windows\npython cryptofuzz -g -t 1000 -s\n# linux &amp; mac\npython3 cryptofuzz --generate --total 1000 --save\n# or can use : -g -t 1000 -s\n</code></pre> <p>Run this command anywhere in your system (in any Path folder) Saved <code>OutputFile.json</code></p> <p>create with CryptoFuzz, you can see from the <code>example</code> section with the following <code>cryptofuzz-example</code> command in your terminal:</p>"},{"location":"#generated-example-private-key-from-cli-cryptofuzz-example","title":"Generated example Private Key From CLI <code>cryptofuzz-example</code> :","text":"<p>all option command for windows <code>python cryptofuzz-example OPTION</code> and Linux or Mac <code>python3 cryptofuzz-example OPTION</code> :</p> <ul> <li>Generated <code>private key</code> (hex) &amp; Converted : <code>python cryptofuzz-example privatekey</code></li> <li>Generated <code>bytes</code> &amp; Converted : <code>python cryptofuzz-example bytes</code></li> <li>Generated <code>mnemonic</code> &amp; Converted : <code>python cryptofuzz-example mnemonic</code></li> <li>Generated <code>wif</code> &amp; Converted : <code>python cryptofuzz-example wif</code></li> <li>Generated <code>binary</code> &amp; Converted : <code>python cryptofuzz-example binary</code></li> <li>Generated Root Key (<code>xprv</code>) &amp; Converted : <code>python cryptofuzz-example xprv</code></li> <li>Generated <code>decimal</code> &amp; Converted : <code>python cryptofuzz-example decimal</code></li> </ul> <p>Generated and Converted Private Key (HEX) To another cryptocurrency: - Generated Private Key (Hex) and Converted To Ethereum Address [Example command]:</p> <pre><code># windows\npython cryptofuzz-example ethereum\n# linux and macOs:\npython3 cryptofuzz-example ethereum\n</code></pre> <ul> <li>Generated Private Key (Hex) and Converted To bitcoin Address [Example command]:</li> </ul> <pre><code># windows\npython cryptofuzz-example bitcoin\n# linux and macOs:\npython3 cryptofuzz-example bitcoin\n</code></pre> <ul> <li>Generated Private Key (Hex) and Converted To dash Address [Example command]:</li> </ul> <pre><code># windows\npython cryptofuzz-example dash\n# linux and macOs:\npython3 cryptofuzz-example dash\n</code></pre> <ul> <li>Generated Private Key (Hex) and Converted To dogecoin Address [Example command]:</li> </ul> <pre><code># windows\npython cryptofuzz-example dogecoin\n# linux and macOs:\npython3 cryptofuzz-example dogecoin\n</code></pre> <ul> <li>Generated Private Key (Hex) and Converted To digibyte Address [Example command]:</li> </ul> <pre><code># windows\npython cryptofuzz-example digibyte\n# linux and macOs:\npython3 cryptofuzz-example digibyte\n</code></pre> <ul> <li>Generated Private Key (Hex) and Converted To Bitcoin Gold Address [Example command]:</li> </ul> <pre><code># windows\npython cryptofuzz-example bitcoingold\n# linux and macOs:\npython3 cryptofuzz-example bitcoingold\n</code></pre> <ul> <li>Generated Private Key (Hex) and Converted To qtum Address [Example command]:</li> </ul> <pre><code># windows\npython cryptofuzz-example qtum\n# linux and macOs:\npython3 cryptofuzz-example qtum\n</code></pre> <ul> <li>Generated Private Key (Hex) and Converted To zcash Address [Example command]:</li> </ul> <pre><code># windows\npython cryptofuzz-example zcash\n# linux and macOs:\npython3 cryptofuzz-example zcash\n</code></pre> <ul> <li>Generated Private Key (Hex) and Converted To Ravencoin Address [Example command]:</li> </ul> <pre><code># windows\npython cryptofuzz-example rvn\n# linux and macOs:\npython3 cryptofuzz-example rvn\n</code></pre> <ul> <li>Generated Private Key (Hex) and Converted To Litecoin Address [Example command]:</li> </ul> <pre><code># windows\npython cryptofuzz-example litecoin\n# linux and macOs:\npython3 cryptofuzz-example litecoin\n</code></pre>"},{"location":"#private-key","title":"Private Key","text":"<p>generated random private key without repeat :</p> <pre><code>from cryptofuzz import getPrivateKey\n\nPrivatekey = getPrivateKey()\n</code></pre>"},{"location":"#mnemonic","title":"Mnemonic","text":"<p>Generated random mnemonic with standard size :</p> <pre><code>from cryptofuzz import getMnemonic\n# default size 12 . can use [12, 18, 24]\nmnemonicString = getMnemonic(size=12)\n</code></pre>"},{"location":"#bytes-seed","title":"Bytes (seed)","text":"<p>Generated Random Bytes Without Repeat :</p> <pre><code>from cryptofuzz import getBytes\nbyte = getBytes()\n</code></pre>"},{"location":"#binary","title":"Binary","text":"<p>Generate Random Binary Without repeat <code>0/1</code>:</p> <pre><code>from cryptofuzz import getBin\n\nbinary_string = getBin(256)\n</code></pre>"},{"location":"#private-key-to-bytes","title":"Private Key To Bytes","text":"<pre><code>from cryptofuzz import PrivateKey_To_Bytes\n\nprivatekey = Wallet.getPrivateKey()\n# Convert Private Key HEX To Bytes SEED\nbyte = Wallet.PrivateKey_To_Bytes(privatekey)\n\n</code></pre>"},{"location":"#private-key-to-wif","title":"Private Key To Wif","text":"<p>generated private key (hex) and convert to wif compressed and uncompressed.</p> <pre><code>from cryptofuzz import getPrivateKey, PrivateKey_To_Wif\n\nprivatekey = getPrivateKey()\n# Convert Private key Hex To Wif\n#  compressed\nwif_compress = PrivateKey_To_Wif(privatekey, compress=True)\n# wif Uncompressed\nwif_uncompress = PrivateKey_To_Wif(privatekey, compress=False)\n</code></pre>"},{"location":"#private-key-to-mnemonic","title":"Private Key To Mnemonic","text":"<pre><code>from cryptofuzz import getPrivateKey, PrivateKey_To_Mnemonic\n\nprivatekey = getPrivateKey()\n# convert private key [hex] To mnemonic\nmnemonic_string = PrivateKey_To_Mnemonics(privatekey)\n# for size mnemonic can use [12, 18, 24]\n</code></pre>"},{"location":"#private-key-to-binary","title":"Private Key To Binary","text":"<pre><code>from cryptofuzz import getPrivateKey, PrivateKey_To_Binary\n\nprivatekey = getPrivateKey()\n\n# convert hex to bin\nbinary_string = PrivateKey_To_Binary(privatekey)\n</code></pre>"},{"location":"#private-key-to-decimal-int","title":"Private Key To Decimal (int)","text":"<pre><code>from cryptofuzz import getPrivateKey, PrivateKey_To_Decimal\n\nprivatekey = getPrivateKey()\n# convert private key hex to number (dec)\ndec = PrivateKey_To_Decimal(privatekey)\n</code></pre>"},{"location":"#private-key-to-address","title":"Private Key To Address","text":"<p>convert private key <code>Hex</code> to Compress and Uncompress Address</p> <pre><code>from cryptofuzz import getPrivateKey, PrivateKey_To_Wif\n\nprivatekey = getPrivateKey()\n# convert private key to compress address\ncompress_Address = PrivateKey_To_Address(privatekey, compress=True)\n# convert to uncompress address\nuncompress_Address = PrivateKey_To_Address(privatekey, compress=False)\n</code></pre>"},{"location":"#private-key-to-public-key","title":"Private Key To Public Key","text":"<p>generated private key and convert to public key compress and uncompress:</p> <pre><code>from cryptofuzz import getPrivateKey, PrivateKey_To_PublicKey\n\nprivatekey = getPrivateKey()\n# convert to public key uncompress\npublic_uncompress = PrivateKey_To_PublicKey(privatekey)\n# convert private key hex to public key compress\npublic_compress = PrivateKey_To_PublicKey(privatekey, compress=True)\n</code></pre>"},{"location":"#bytes-to-private-key","title":"Bytes To Private Key","text":"<pre><code>from cryptofuzz import getBytes, Bytes_To_PrivateKey\n\nbyte = getBytes()\n# convert bytes to hex (private key)\nprivatekey = Bytes_To_PrivateKey(byte)\n</code></pre>"},{"location":"#bytes-to-mnemonic","title":"Bytes To mnemonic","text":"<p>convert bytes to mnemonic with default <code>size=12</code></p> <p>can use standard sizr: <code>12, 18, 24</code></p> <pre><code>from cryptofuzz import getBytes, Bytes_To_Mnemonic\n\nbyte = getBytes()\n# Convert bytes to mnemonic with default size 12\nmnemonic_words = Bytes_To_Mnemonic(byte)\n</code></pre>"},{"location":"#bytes-to-wif","title":"Bytes To Wif","text":"<p>convert bytes To wif Compress and uncompress:</p> <pre><code>from cryptofuzz import getBytes, Bytes_To_Wif\n\nbyte = getBytes()\n# compress wif\nwif_compress = Bytes_To_Wif(byte, compress=True)\n#uncompress Wif\nwif_uncompress = Bytes_To_Wif(byte, compress=False)\n</code></pre>"},{"location":"#bytes-to-public-key","title":"Bytes To Public Key","text":"<p>convert bytes to public key compress and uncompress</p> <pre><code>from cryptofuzz import getBytes, Bytes_To_PublicKey\n\nbyte = getBytes()\n# compress Publickey\nPub_compress = Bytes_To_PublicKey(byte, compress=True)\n#uncompress Wif\nPub_uncompress = Bytes_To_PublicKey(byte, compress=False)\n</code></pre>"},{"location":"#bytes-to-dec-number","title":"Bytes to Dec (number)","text":"<p>convert bytes to decimal number</p> <pre><code>from cryptofuzz import getBytes, Bytes_To_Decimal\n\nbyte = getBytes()\n#convert to integer \ndec = Bytes_To_Decimal(byte)\n</code></pre>"},{"location":"#wif-to-public-key","title":"Wif To Public Key","text":"<p>convert wif to public key compress and uncompress</p> <pre><code>from cryptofuzz import Wif_To_PublicKey\n\nwif = \"WIF_STRING_HERE\"\npub_compress = Wif_To_PublicKey(wif, compress=True)\npub_uncompress = Wif_To_PublicKey(wif, compress=False)\n</code></pre>"},{"location":"#wif-to-mnemonic","title":"Wif To Mnemonic","text":"<p>convert Wif To Mnemonic With Default <code>size=12</code></p> <pre><code>from cryptofuzz import Wif_To_Mnemonic\n\nwif = \"WIF_STRING_HERE\"\nmnemonic_string = Wif_To_Mnemonic(wif)\n</code></pre>"},{"location":"#passphrase-to-compress-and-uncompress-address","title":"Passphrase To Compress And Uncompress Address","text":"<pre><code>from cryptofuzz.Wallet import *\n\npassphrase = \"Mmdrza.com\"\ncompress_address = Passphrase_To_Address(passphrase, True)\nuncompress_address = Passphrase_To_Address(passphrase, False)\n\n</code></pre>"},{"location":"#generated-xprv-and-xpub","title":"Generated XPRV and XPUB :","text":"<pre><code>from cryptofuzz.Wallet import *\n\nseed = getBytes()\n\nxprv = Bytes_To_XPRV(seed)\n\nxpub = Bytes_To_XPUB(seed)\n\n</code></pre>"},{"location":"#contact","title":"contact","text":"<p>Programmer &amp; Owner : Mmdrza.Com</p> <p>Email : PyMmdrza@Gmail.Com</p> <p>Github: cryptofuzz/cryptofuzz</p> <p>Document: cryptofuzz</p>"},{"location":"#donate","title":"Donate:","text":"<p>Bitcoin (BTC): <code>1MMDRZA12xdBLD1P5AfEfvEMErp588vmF9</code></p> <p>Ethereum &amp; USDT (ERC20): <code>0x348e3C3b17784AafD7dB67d011b85F838F16E2D1</code></p> <p>USDT &amp; TRON (TRC20): <code>TR4mA5quGVHGYS186HKDuArbD8SVssiZVx</code></p> <p>Litecoin (LTC): <code>ltc1qtgvxc6na9pxvznu05yys3j5rq9ej6kahe2j50v</code></p>"}]}